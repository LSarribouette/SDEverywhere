#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJ_DIR=$SCRIPT_DIR/..
MODELS_DIR=$PROJ_DIR/models

set -e # fail on error
#set -x

cd "$PROJ_DIR"

# Use the local sde command.
SDE_MAIN="$PROJ_DIR/packages/cli/src/main.js"

function test {
  MODEL=$1
  echo "Testing the $MODEL model"
  # if [[ $MODEL == "directdata" || $MODEL == "extdata" || $MODEL == "getdata" || $MODEL == "prune" || $MODEL == "subscript" || $MODEL == "sumif" ]]; then
  #   echo "Skipping"
  #   echo
  #   return
  # fi
  MODEL_DIR=$MODELS_DIR/$MODEL

  # Clean up before
  node "$SDE_MAIN" clean --modeldir "$MODEL_DIR"

  # Test (only if there is a dat file to compare against)
  if [[ -f $MODEL_DIR/${MODEL}.dat ]]; then
    SPEC_FILE=$MODEL_DIR/${MODEL}_spec.json
    if [[ -f $SPEC_FILE ]]; then
      TEST_ARGS="--spec $SPEC_FILE"
    else
      TEST_ARGS=
    fi
    # Reduce comparison precision for models that cannot reproduce Vensim results.
    PRECISION="1e-4"
    if [[ $MODEL == "allocate" ]]; then
      PRECISION="1e-2"
    fi
    node "$SDE_MAIN" test $TEST_ARGS -p $PRECISION "$MODEL_DIR/$MODEL"
  fi

  # Run additional script to validate output
  VALIDATE_SCRIPT=$MODEL_DIR/${MODEL}_check.sh
  if [[ -f $VALIDATE_SCRIPT ]]; then
    echo "Performing additional validation checks on $MODEL"
    $VALIDATE_SCRIPT
  fi

  # Clean up after
  node "$SDE_MAIN" clean --modeldir "$MODEL_DIR"

  echo
}

function compare {
  MODEL=$1
  MODEL_DIR=$MODELS_DIR/$MODEL

  COMPARE_DIR=$MODEL_DIR/compare
  MODEL_OLD_C=$COMPARE_DIR/${MODEL}_old.c
  MODEL_NEW_C=$COMPARE_DIR/${MODEL}_new.c
  mkdir -p $COMPARE_DIR

  export SDE_PRIV_USE_NEW_PARSE=0
  test $1
  cp $MODEL_DIR/build/$MODEL.c $MODEL_OLD_C
  export SDE_PRIV_USE_NEW_PARSE=1
  test $1
  cp $MODEL_DIR/build/$MODEL.c $MODEL_NEW_C

  git diff -w --no-index $MODEL_OLD_C $MODEL_NEW_C
}

if [[ $1 == "compare" ]]; then
  if [[ -n $2 ]]; then
    # Test the given model against saved Vensim data.
    compare $2
  else
    # Test each model against saved Vensim data.
    for m in $(ls "$MODELS_DIR"); do
      compare $m
    done
  fi
else
  if [[ -n $1 ]]; then
    # Test the given model against saved Vensim data.
    test $1
  else
    # Test each model against saved Vensim data.
    for m in $(ls "$MODELS_DIR"); do
      test $m
    done
  fi
fi

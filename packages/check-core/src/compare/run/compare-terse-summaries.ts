// Copyright (c) 2023 Climate Interactive / New Venture Fund

import type { CompareConfig } from '../config/compare-config'
import type { CompareDatasetSummary } from './compare-summary'

/**
 * Restore the full set of summaries that was generated by `runCompare` (one summary
 * for each scenario/dataset pairing based on the `CompareConfig`).
 *
 * @param compareConfig The config that contains the scenarios used to reconstruct the
 * full set of summaries.
 * @param terseSummaries The set of terse summaries for comparisons that produced a
 * non-zero `maxDiff` result.
 */
export function restoreFromTerseSummaries(
  compareConfig: CompareConfig,
  terseSummaries: CompareDatasetSummary[]
): CompareDatasetSummary[] {
  // Put the provided summaries in a map for faster lookup
  const existingSummaries: Map<string, CompareDatasetSummary> = new Map()
  for (const summary of terseSummaries) {
    const key = `${summary.s}::${summary.d}`
    existingSummaries.set(key, summary)
  }

  // Get the full set of scenario/dataset pairs
  const allDatasetSummaries: CompareDatasetSummary[] = []
  for (const scenarioDefKey of compareConfig.scenarios.getAllDefKeys()) {
    const scenarioDef = compareConfig.scenarios.getByDefKey(scenarioDefKey)
    const datasetKeys = compareConfig.datasets.getDatasetKeysForScenario(scenarioDef)
    for (const datasetKey of datasetKeys) {
      // If we have a summary in the array that was passed in, it means
      // the `maxDiff` was non-zero, so include that value, otherwise
      // assume zero
      const key = `${scenarioDefKey}::${datasetKey}`
      const existingSummary = existingSummaries.get(key)
      const maxDiff = existingSummary?.md || 0
      allDatasetSummaries.push({
        s: scenarioDefKey,
        d: datasetKey,
        md: maxDiff
      })
    }
  }

  return allDatasetSummaries
}
